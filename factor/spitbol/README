Here is a tool (or the beginning of it) to generate parsers.

It is based on both peg parsers (http://cs.factorcode.org/content/vocab-peg.html) and Spitbol patterns (http://www.infeig.unige.ch/support/ada/gnatlb/g-spipat.html, for the Ada port), and is meant to cumulate their respective flexibilities.

Features :

Spitbol name    -> Factor name

Arb             -> arb
Bal             -> bal
Cancel          -> cancel
Fail            -> fail
Fence           -> fence
Rest            -> rest
Any(S)          -> any-char
Arbno(P)        -> arbno
Break(S)        -> break
BreakX(S)       -> breakx
Fence(P)        -> fenceno
Len(N)          -> len
NotAny(S)       -> not-any
NSpan(S)        -> nspan
Pos(N)          -> pos
RPos(N)         -> rpos
RTab(N)         -> rtab
Tab(N)          -> tab
Span(S)         -> span

(space)         -> &
|               -> |

Ada name        -> Factor name

1token          -> 1token
ensure          -> ensure
ensure-not      -> ensure-not
action          -> action


Use the above word to buil your parser, in peg style, then use the parse words to apply it to a string. Example of how to build a parser :

.*jour Mo*.*$ -> arb "jour M" 1token & "o" 1token arbno & rest &
